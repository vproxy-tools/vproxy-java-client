/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import org.junit.Before;
import org.junit.Test;
import vproxy.client.ApiException;

import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;
import static vproxy.client.TestUtils.randomName;

/**
 * API tests for ServerGroupApi
 */
public class ServerGroupApiTest {

    private final ServerGroupApi api = new ServerGroupApi();
    private String upsName;
    private String elgName;
    private String name;

    @Before
    public void setUp() throws ApiException {
        upsName = randomName("ups");
        elgName = randomName("elg");
        name = randomName("sg");

        UpstreamCreate ups = new UpstreamCreate();
        ups.setName(upsName);
        new UpstreamApi().addUpstream(ups);

        EventLoopGroupCreate elg = new EventLoopGroupCreate();
        elg.setName(elgName);
        new EventLoopGroupApi().addEventLoopGroup(elg);
    }

    private void addServerGroup() throws ApiException {
        ServerGroupCreate sg = new ServerGroupCreate();
        sg.setName(name);
        sg.setTimeout(1000);
        sg.setPeriod(2000);
        sg.setUp(2);
        sg.setDown(3);
        sg.setProtocol(CheckProtocol.TCP);
        sg.setMethod(ServerGroupMethod.WRR);
        sg.putAnnotationsItem("x", "y");
        sg.setEventLoopGroup(elgName);
        api.addServerGroup(sg);
    }

    private void addServerGroupIntoUpstream() throws ApiException {
        ServerGroupInUpstreamCreate req = new ServerGroupInUpstreamCreate();
        req.setName(name);
        req.setWeight(10);
        api.addServerGroupInUpstream(upsName, req);
    }

    /**
     * add server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addServerGroupTest() throws ApiException {
        int oldLen = api.listServerGroup().size();

        addServerGroup();

        List<ServerGroup> sgList = api.listServerGroup();
        assertEquals(oldLen + 1, sgList.size());
        ServerGroup sg = api.getServerGroup(name);
        assertTrue(sgList.contains(sg));
        assertEquals(name, sg.getName());
        assertEquals(1000, sg.getTimeout().intValue());
        assertEquals(2000, sg.getPeriod().intValue());
        assertEquals(2, sg.getUp().intValue());
        assertEquals(3, sg.getDown().intValue());
        assertEquals(CheckProtocol.TCP, sg.getProtocol());
        assertEquals(ServerGroupMethod.WRR, sg.getMethod());
        assertEquals(Collections.singletonMap("x", "y"), sg.getAnnotations());
        assertEquals(elgName, sg.getEventLoopGroup());
    }

    /**
     * add server-group into upstream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addServerGroupInUpstreamTest() throws ApiException {
        addServerGroup();

        int oldLen = api.listServerGroupInUpstream(upsName).size();

        addServerGroupIntoUpstream();

        List<ServerGroupInUpstream> sgList = api.listServerGroupInUpstream(upsName);
        assertEquals(oldLen + 1, sgList.size());
        ServerGroupInUpstream sg = api.getServerGroupInUpstream(upsName, name);
        assertTrue(sgList.contains(sg));
        assertEquals(name, sg.getName());
        assertEquals(10, sg.getWeight().intValue());
    }

    /**
     * get detailed info of one server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServerGroupTest() throws ApiException {
        addServerGroup();

        ServerGroupDetail sg = api.describeServerGroup(name);
        assertEquals(name, sg.getName());
        assertEquals(1000, sg.getTimeout().intValue());
        assertEquals(2000, sg.getPeriod().intValue());
        assertEquals(2, sg.getUp().intValue());
        assertEquals(3, sg.getDown().intValue());
        assertEquals(CheckProtocol.TCP, sg.getProtocol());
        assertEquals(ServerGroupMethod.WRR, sg.getMethod());
        assertEquals(Collections.singletonMap("x", "y"), sg.getAnnotations());
        assertEquals(elgName, sg.getEventLoopGroup().getName());
        assertNotNull(sg.getServerList());
    }

    /**
     * get detailed info of one server-group in upstream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServerGroupInUpstreamTest() throws ApiException {
        addServerGroup();
        addServerGroupIntoUpstream();

        ServerGroupInUpstreamDetail sg = api.describeServerGroupInUpstream(upsName, name);
        assertEquals(name, sg.getName());
        assertEquals(10, sg.getWeight().intValue());
        assertEquals(name, sg.getServerGroup().getName());
        {
            assertEquals(api.describeServerGroup(name), sg.getServerGroup());
        }
    }

    /**
     * get server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerGroupTest() throws ApiException {
        addServerGroup();

        ServerGroup sg = api.getServerGroup(name);

        assertNotNull(sg);
    }

    /**
     * get server-group in upstream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerGroupInUpstreamTest() throws ApiException {
        addServerGroup();
        addServerGroupIntoUpstream();

        ServerGroupInUpstream sg = api.getServerGroupInUpstream(upsName, name);

        assertNotNull(sg);
    }

    /**
     * retrieve server-group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServerGroupTest() throws ApiException {
        List<ServerGroup> response = api.listServerGroup();

        assertNotNull(response);
    }

    /**
     * retrieve server-group list from upstream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServerGroupInUpstreamTest() throws ApiException {
        List<ServerGroupInUpstream> response = api.listServerGroupInUpstream(upsName);

        assertNotNull(response);
    }

    /**
     * remove server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeServerGroupTest() throws ApiException {
        addServerGroup();

        List<ServerGroup> sgListBefore = api.listServerGroup();
        int lenBefore = sgListBefore.size();
        ServerGroup sgObject = api.getServerGroup(name);
        assertTrue(sgListBefore.contains(sgObject));

        api.removeServerGroup(name);

        List<ServerGroup> sgListAfter = api.listServerGroup();
        int lenAfter = sgListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(sgListAfter.contains(sgObject));
    }

    /**
     * remove server-group from upstream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeServerGroupInUpstreamTest() throws ApiException {
        addServerGroup();
        addServerGroupIntoUpstream();

        List<ServerGroupInUpstream> sgListBefore = api.listServerGroupInUpstream(upsName);
        int lenBefore = sgListBefore.size();
        ServerGroupInUpstream sgObject = api.getServerGroupInUpstream(upsName, name);
        assertTrue(sgListBefore.contains(sgObject));

        api.removeServerGroupInUpstream(upsName, name);

        List<ServerGroupInUpstream> sgListAfter = api.listServerGroupInUpstream(upsName);
        int lenAfter = sgListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(sgListAfter.contains(sgObject));
    }

    /**
     * update server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerGroupTest() throws ApiException {
        addServerGroup();

        ServerGroupUpdate update = new ServerGroupUpdate();
        update.setTimeout(1234);
        update.setPeriod(5678);
        update.setUp(12);
        update.setDown(34);
        update.setProtocol(CheckProtocol.NONE);
        update.setMethod(ServerGroupMethod.WLC);
        update.putAnnotationsItem("a", "b");
        api.updateServerGroup(name, update);

        ServerGroup sg = api.getServerGroup(name);
        assertEquals(1234, sg.getTimeout().intValue());
        assertEquals(5678, sg.getPeriod().intValue());
        assertEquals(12, sg.getUp().intValue());
        assertEquals(34, sg.getDown().intValue());
        assertEquals(CheckProtocol.NONE, sg.getProtocol());
        assertEquals(ServerGroupMethod.WLC, sg.getMethod());
        assertEquals(Collections.singletonMap("a", "b"), sg.getAnnotations());
    }

    /**
     * update server-group in upstream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerGroupInUpstreamTest() throws ApiException {
        addServerGroup();
        addServerGroupIntoUpstream();

        ServerGroupInUpstreamUpdate update = new ServerGroupInUpstreamUpdate();
        update.setWeight(17);
        api.updateServerGroupInUpstream(upsName, name, update);

        ServerGroupInUpstream sg = api.getServerGroupInUpstream(upsName, name);
        assertEquals(17, sg.getWeight().intValue());
    }

}
