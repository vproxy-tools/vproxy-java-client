/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import org.junit.Before;
import org.junit.Test;
import vproxy.client.ApiException;

import java.util.List;

import static org.junit.Assert.*;
import static vproxy.client.TestUtils.randomName;

/**
 * API tests for SecurityGroupApi
 */
public class SecurityGroupApiTest {

    private final SecurityGroupApi api = new SecurityGroupApi();
    private String name;

    @Before
    public void setUp() {
        name = randomName("secg");
    }

    private void addSecurityGroup() throws ApiException {
        SecurityGroupCreate req = new SecurityGroupCreate();
        req.setName(name);
        req.setDefaultRule(Rule.ALLOW);
        api.addSecurityGroup(req);
    }

    /**
     * add security-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSecurityGroupTest() throws ApiException {
        int oldLen = api.listSecurityGroup().size();

        addSecurityGroup();

        List<SecurityGroup> secgList = api.listSecurityGroup();
        assertEquals(oldLen + 1, secgList.size());
        SecurityGroup secg = api.getSecurityGroup(name);
        assertTrue(secgList.contains(secg));
        assertEquals(name, secg.getName());
        assertEquals(Rule.ALLOW, secg.getDefaultRule());
    }

    /**
     * get detailed info of one security-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSecurityGroupTest() throws ApiException {
        addSecurityGroup();

        SecurityGroupDetail secg = api.describeSecurityGroup(name);

        assertEquals(name, secg.getName());
        assertEquals(Rule.ALLOW, secg.getDefaultRule());
        assertNotNull(secg.getRuleList());
    }

    /**
     * get security-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecurityGroupTest() throws ApiException {
        addSecurityGroup();

        SecurityGroup secg = api.getSecurityGroup(name);

        assertNotNull(secg);
    }

    /**
     * retrieve security-group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecurityGroupTest() throws ApiException {
        List<SecurityGroup> response = api.listSecurityGroup();

        assertNotNull(response);
    }

    /**
     * remove security-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSecurityGroupTest() throws ApiException {
        addSecurityGroup();

        List<SecurityGroup> secgListBefore = api.listSecurityGroup();
        int lenBefore = secgListBefore.size();
        SecurityGroup secgObject = api.getSecurityGroup(name);
        assertTrue(secgListBefore.contains(secgObject));

        api.removeSecurityGroup(name);

        List<SecurityGroup> secgListAfter = api.listSecurityGroup();
        int lenAfter = secgListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(secgListAfter.contains(secgObject));
    }

    /**
     * update security-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecurityGroupTest() throws ApiException {
        addSecurityGroup();

        SecurityGroupUpdate update = new SecurityGroupUpdate();
        update.setDefaultRule(Rule.DENY);
        api.updateSecurityGroup(name, update);

        SecurityGroup secg = api.getSecurityGroup(name);
        assertEquals(Rule.DENY, secg.getDefaultRule());
    }

}
