/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import org.junit.Before;
import vproxy.client.ApiException;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;
import static vproxy.client.TestUtils.randomName;
import static vproxy.client.TestUtils.randomPort;

/**
 * API tests for Socks5ServerApi
 */
public class Socks5ServerApiTest {

    private final Socks5ServerApi api = new Socks5ServerApi();
    private String acceptorElgName;
    private String workerElgName;
    private String upsName;
    private String secgName;
    private String name;
    private int port;

    @Before
    public void setUp() throws ApiException {
        acceptorElgName = randomName("acceptor");
        workerElgName = randomName("worker");
        upsName = randomName("ups");
        secgName = randomName("secg");
        name = randomName("socks5");
        port = randomPort();

        EventLoopGroupCreate acceptor = new EventLoopGroupCreate();
        acceptor.setName(acceptorElgName);
        new EventLoopGroupApi().addEventLoopGroup(acceptor);

        EventLoopGroupCreate worker = new EventLoopGroupCreate();
        worker.setName(workerElgName);
        new EventLoopGroupApi().addEventLoopGroup(worker);

        UpstreamCreate ups = new UpstreamCreate();
        ups.setName(upsName);
        new UpstreamApi().addUpstream(ups);

        SecurityGroupCreate secg = new SecurityGroupCreate();
        secg.setName(secgName);
        secg.setDefaultRule(Rule.ALLOW);
        new SecurityGroupApi().addSecurityGroup(secg);
    }

    private void addSocks5Server() throws ApiException {
        Socks5ServerCreate req = new Socks5ServerCreate();
        req.setName(name);
        req.setAcceptorLoopGroup(acceptorElgName);
        req.setWorkerLoopGroup(workerElgName);
        req.setAddress("127.0.0.1:" + port);
        req.setBackend(upsName);
        req.setInBufferSize(1024);
        req.setOutBufferSize(2048);
        req.setSecurityGroup(secgName);
        req.setAllowNonBackend(false);
        api.addSocks5Server(req);
    }

    /**
     * add socks5-server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addSocks5ServerTest() throws ApiException {
        int oldLen = api.listSocks5Server().size();

        addSocks5Server();

        List<Socks5Server> socks5List = api.listSocks5Server();
        assertEquals(oldLen + 1, socks5List.size());
        Socks5Server socks5 = api.getSocks5Server(name);
        assertTrue(socks5List.contains(socks5));
        assertEquals(name, socks5.getName());
        assertEquals(acceptorElgName, socks5.getAcceptorLoopGroup());
        assertEquals(workerElgName, socks5.getWorkerLoopGroup());
        assertEquals("127.0.0.1:" + port, socks5.getAddress());
        assertEquals(upsName, socks5.getBackend());
        assertEquals(1024, socks5.getInBufferSize().intValue());
        assertEquals(2048, socks5.getOutBufferSize().intValue());
        assertEquals(secgName, socks5.getSecurityGroup());
        assertEquals(false, socks5.isAllowNonBackend());
    }

    /**
     * get detailed info of one socks5-server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSocks5ServerTest() throws ApiException {
        addSocks5Server();

        Socks5ServerDetail socks5 = api.describeSocks5Server(name);
        assertEquals(name, socks5.getName());
        assertEquals(acceptorElgName, socks5.getAcceptorLoopGroup().getName());
        assertEquals(workerElgName, socks5.getWorkerLoopGroup().getName());
        assertEquals("127.0.0.1:" + port, socks5.getAddress());
        assertEquals(upsName, socks5.getBackend().getName());
        assertEquals(1024, socks5.getInBufferSize().intValue());
        assertEquals(2048, socks5.getOutBufferSize().intValue());
        assertEquals(secgName, socks5.getSecurityGroup().getName());
        assertEquals(false, socks5.isAllowNonBackend());
    }

    /**
     * get socks5-server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSocks5ServerTest() throws ApiException {
        addSocks5Server();

        Socks5Server response = api.getSocks5Server(name);

        assertNotNull(response);
    }

    /**
     * retrieve socks5-server list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSocks5ServerTest() throws ApiException {
        List<Socks5Server> response = api.listSocks5Server();

        assertNotNull(response);
    }

    /**
     * remove socks5-server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSocks5ServerTest() throws ApiException {
        addSocks5Server();

        List<Socks5Server> socks5ListBefore = api.listSocks5Server();
        int lenBefore = socks5ListBefore.size();
        Socks5Server socks5Object = api.getSocks5Server(name);
        assertTrue(socks5ListBefore.contains(socks5Object));

        api.removeSocks5Server(name);

        List<Socks5Server> socks5ListAfter = api.listSocks5Server();
        int lenAfter = socks5ListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(socks5ListAfter.contains(socks5Object));
    }

    /**
     * update socks5-server
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSocks5ServerTest() throws ApiException {
        addSocks5Server();

        String secgName2 = randomName("secg");
        SecurityGroupCreate secg = new SecurityGroupCreate();
        secg.setName(secgName2);
        secg.setDefaultRule(Rule.ALLOW);
        new SecurityGroupApi().addSecurityGroup(secg);

        Socks5ServerUpdate update = new Socks5ServerUpdate();
        update.setAllowNonBackend(true);
        update.setInBufferSize(1122);
        update.setOutBufferSize(3344);
        update.setSecurityGroup(secgName2);
        api.updateSocks5Server(name, update);

        Socks5Server socks5 = api.getSocks5Server(name);
        assertEquals(true, socks5.isAllowNonBackend());
        assertEquals(1122, socks5.getInBufferSize().intValue());
        assertEquals(3344, socks5.getOutBufferSize().intValue());
        assertEquals(secgName2, socks5.getSecurityGroup());
    }

}
