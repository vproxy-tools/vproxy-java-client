/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import vproxy.client.ApiException;
import vproxy.client.model.Socks5Server;
import vproxy.client.model.Socks5ServerCreate;
import vproxy.client.model.Socks5ServerDetail;
import vproxy.client.model.Socks5ServerUpdate;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for Socks5ServerApi
 */
@Ignore
public class Socks5ServerApiTest {

    private final Socks5ServerApi api = new Socks5ServerApi();

    
    /**
     * add socks5-server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSocks5ServerTest() throws ApiException {
        Socks5ServerCreate body = null;
        api.addSocks5Server(body);

        // TODO: test validations
    }
    
    /**
     * get detailed info of one socks5-server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void describeSocks5ServerTest() throws ApiException {
        String socks5 = null;
        Socks5ServerDetail response = api.describeSocks5Server(socks5);

        // TODO: test validations
    }
    
    /**
     * get socks5-server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSocks5ServerTest() throws ApiException {
        String socks5 = null;
        Socks5Server response = api.getSocks5Server(socks5);

        // TODO: test validations
    }
    
    /**
     * retrieve socks5-server list
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSocks5ServerTest() throws ApiException {
        List<Socks5Server> response = api.listSocks5Server();

        // TODO: test validations
    }
    
    /**
     * remove socks5-server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeSocks5ServerTest() throws ApiException {
        String socks5 = null;
        api.removeSocks5Server(socks5);

        // TODO: test validations
    }
    
    /**
     * update socks5-server
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSocks5ServerTest() throws ApiException {
        String socks5 = null;
        Socks5ServerUpdate body = null;
        api.updateSocks5Server(socks5, body);

        // TODO: test validations
    }
    
}
