/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import org.junit.Before;
import vproxy.client.ApiException;
import org.junit.Test;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;
import static vproxy.client.TestUtils.randomName;

/**
 * API tests for CertKeyApi
 */
public class CertKeyApiTest {
    public static final String TEST_CERT = "-----BEGIN CERTIFICATE-----\n" +
        "MIIDrDCCApQCCQDO2qFtjzwFWzANBgkqhkiG9w0BAQsFADCBljELMAkGA1UEBhMC\n" +
        "Q04xETAPBgNVBAgMCFpoZWppYW5nMREwDwYDVQQHDAhIYW5nemhvdTEPMA0GA1UE\n" +
        "CgwGdnByb3h5MQ8wDQYDVQQLDAZ2cHJveHkxGzAZBgNVBAMMEnZwcm94eS5jYXNz\n" +
        "aXRlLm5ldDEiMCAGCSqGSIb3DQEJARYTd2tnY2Fzc0Bob3RtYWlsLmNvbTAgFw0x\n" +
        "OTA3MTYwODAxNDNaGA8yMTE5MDYyMjA4MDE0M1owgZYxCzAJBgNVBAYTAkNOMREw\n" +
        "DwYDVQQIDAhaaGVqaWFuZzERMA8GA1UEBwwISGFuZ3pob3UxDzANBgNVBAoMBnZw\n" +
        "cm94eTEPMA0GA1UECwwGdnByb3h5MRswGQYDVQQDDBJ2cHJveHkuY2Fzc2l0ZS5u\n" +
        "ZXQxIjAgBgkqhkiG9w0BCQEWE3drZ2Nhc3NAaG90bWFpbC5jb20wggEiMA0GCSqG\n" +
        "SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCgTHZBQNzCeuTcN4s5Cc7uKg/iLWwobByG\n" +
        "rTTVHAYSpUe0ygaHCAWV4nblf0pSW5uPhhxTGEZFJomjt2EKFkSYEJXpT2C3abQw\n" +
        "Jw8lZM8gfeqeC/9Xng8c2nffcu8Cy0PcNq1O6B9vXiKQ6JtRHnQeGUIGWWW8cMUT\n" +
        "H6FSyk4C/nB64F+bjYeG8bJBNeziUFVBZSeOhE7Pjf42HkotqIpuMzBEhnNWlpY3\n" +
        "pkgbCZaMNkaeCAW63XveDxj2YaFByLAAoAhtLO9mqcX44e7HILg1POL8rIwNy/l8\n" +
        "kkoPu1UHyzOS/f6WaddBjZqtjjls4Ph8xD0ZBwfd27TywGZCOaz/AgMBAAEwDQYJ\n" +
        "KoZIhvcNAQELBQADggEBAEC+cvEiSrnZQZRQG+vS4VGnpnerllxfUQxn+JU+B529\n" +
        "fJWlacY1TlVxkrAN/33m0xoK5KhyN0ML/OPGcCGQbh36QjZGnFREsDn+xMvs8Kfh\n" +
        "ufW67kDNh0GTJWHseAI/MXzwVUrfOrEHGEhYat4QjVNtrqQVtsR18f+z+k3pfTED\n" +
        "e1C8zyKbbjeCNybOuuGOxc2HHuBFZveDpB3sCyUIW2iS1tCBXvI9u2cLo/QsjsAz\n" +
        "kkv6/Fh8BOQT3IMHTh31tfdDJuA0lCs9o9Kc66AaZxTYm8SyNh5L1doYHXoptphI\n" +
        "gAAa3BEO21XanlNRU1927oxt6mwNp+WeU1xvyoxCWeE=\n" +
        "-----END CERTIFICATE-----\n";
    public static final String TEST_KEY = "-----BEGIN PRIVATE KEY-----\n" +
        "MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCgTHZBQNzCeuTc\n" +
        "N4s5Cc7uKg/iLWwobByGrTTVHAYSpUe0ygaHCAWV4nblf0pSW5uPhhxTGEZFJomj\n" +
        "t2EKFkSYEJXpT2C3abQwJw8lZM8gfeqeC/9Xng8c2nffcu8Cy0PcNq1O6B9vXiKQ\n" +
        "6JtRHnQeGUIGWWW8cMUTH6FSyk4C/nB64F+bjYeG8bJBNeziUFVBZSeOhE7Pjf42\n" +
        "HkotqIpuMzBEhnNWlpY3pkgbCZaMNkaeCAW63XveDxj2YaFByLAAoAhtLO9mqcX4\n" +
        "4e7HILg1POL8rIwNy/l8kkoPu1UHyzOS/f6WaddBjZqtjjls4Ph8xD0ZBwfd27Ty\n" +
        "wGZCOaz/AgMBAAECggEBAJiyXY+pVuHXqXzxWCj8Y+dRoBHHTRlwavgLtKEw8cP/\n" +
        "N8BLFk644IE32iShzc2IQDZG/WJWZFHo9QJEZCb0sWDdo8A9AheVlLSt8GqhjgEY\n" +
        "kU7+hL0U7raAkeIEHRPfRwRV/V+GFLPEy06YlaN/TAOD8fYUYKpSDhk6bzVrS0bj\n" +
        "UYi0MdQqV89Y4JOMf9fSiJR3kf4H1zW6FViOMhbZegzLKfJcpDDZRQuf/cRm2+z3\n" +
        "OJX+XoJsHdGmY42sTHGidDLFjRxVjMwrUtL6lFt/lREFsScvKB2OTVWw7nHZ4MVs\n" +
        "d8e/kAsSQ3PaEWn7CQmPG1pcTV0u6vDPC+g2acO25tECgYEAzhnBDYi5FFkgdfuu\n" +
        "ejWouJmNL2XLtnDEi68I2zS1P/TuUMhAZ3DHk4pGWTGLCKXtb1hQfMat85hfDQF6\n" +
        "TAXZ9b8Dm1atEKd8TGuIU/Gzo9eglApw69SO99LFcr+L6qnUuClKEJTAzYi2xz7N\n" +
        "klhxlhim5lZd/Tp/QpA4KeH54FcCgYEAxxvgKgd2T6slo7zXbwxSUQw18kWsIuvF\n" +
        "O0oH6TV0CA/712FhDAsV+QhuAU5X53zC/j+KoXXSQfvZsj4AqYgYL5dzfmv9zQAS\n" +
        "/A3qkvKjsaPMZnKWGw1BzPUh3AWMPVL9DO2P7UHv1nnCvWMlVgci1WeIKHhdChkU\n" +
        "KmnFynm+j5kCgYEAvBmLNTP0XtrdInD6k7UHcLtLvNd2LeMLrsSoG5AmX+HF41pw\n" +
        "VTf8He7UN7FcyB7P7ZA3nTmjJzCIh5EysdGhVITp4MshlpKVghWeTabJoh45AwPo\n" +
        "fYP4m7v00r55D0nCx/V/EFUDBlLhJkVuT0ODH08OfCiVDXlnDjQb3jXM3W8CgYA8\n" +
        "8QhEdPI+YjjsC9G4mIHdcqpUVATiz10Xz4nqVEUGbrX7bz+/6ui3x1+8IJmBLcuU\n" +
        "/CfXUXOgZJB2IModGZ2le2qLKEyPYVVuNmg0v/VgWq0mMi5Fa2JXdDP/3ubUokD3\n" +
        "owKpcMQS1kPHqb/0u8xqmvyuvmBjxddJQASc+3RbCQKBgQC3MC+MpFimu6Ig3sLN\n" +
        "W9y83ww4KHyjsNzNJSFMOUn1zLLoVeQ2VpfRCxqxUfU0gfeJmn8It7WtkG87bmVW\n" +
        "jsLm2X0GsXQsLqLY9iKXUhJHslad+7xS91Mc81K9YJhRpHpl5UFd/hGhoJdN5mpF\n" +
        "5wonEzCuFqzz1ASiYQWtbeWSBA==\n" +
        "-----END PRIVATE KEY-----\n";

    private final CertKeyApi api = new CertKeyApi();
    private String name;
    private String certPath;
    private String keyPath;

    @Before
    public void setUp() throws Exception {
        File tmpCertFile = File.createTempFile("cert", ".pem");
        tmpCertFile.deleteOnExit();
        File tmpKeyFile = File.createTempFile("key", ".pem");
        tmpKeyFile.deleteOnExit();

        FileOutputStream fos = new FileOutputStream(tmpCertFile);
        fos.write(TEST_CERT.getBytes());
        fos.flush();
        fos.close();
        fos = new FileOutputStream(tmpKeyFile);
        fos.write(TEST_KEY.getBytes());
        fos.flush();
        fos.close();

        certPath = tmpCertFile.getAbsolutePath();
        keyPath = tmpKeyFile.getAbsolutePath();
        name = randomName("ck");
    }

    private void addCertKey() throws ApiException {
        CertKeyCreate body = new CertKeyCreate();
        body.setName(name);
        body.addCertsItem(certPath);
        body.setKey(keyPath);
        api.addCertKey(body);
    }

    /**
     * add cert-key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCertKeyTest() throws ApiException {
        int oldLen = api.listCertKey().size();

        addCertKey();

        List<CertKey> ckList = api.listCertKey();
        assertEquals(oldLen + 1, ckList.size());
        CertKey ck = api.getCertKey(name);
        assertTrue(ckList.contains(ck));
        assertEquals(name, ck.getName());
        assertEquals(Collections.singletonList(certPath), ck.getCerts());
        assertEquals(keyPath, ck.getKey());
    }

    /**
     * get detailed info of one cert-key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCertKeyTest() throws ApiException {
        addCertKey();

        CertKeyDetail ck = api.describeCertKey(name);

        assertEquals(name, ck.getName());
        assertEquals(Collections.singletonList(certPath), ck.getCerts());
        assertEquals(keyPath, ck.getKey());
        assertEquals(Collections.singletonList(TEST_CERT.trim()), ck.getCertPemList());
        assertFalse(ck.getKeySHA1().isEmpty());
    }

    /**
     * get cert-key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCertKeyTest() throws ApiException {
        addCertKey();

        CertKey response = api.getCertKey(name);

        assertNotNull(response);
    }

    /**
     * retrieve cert-key list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCertKeyTest() throws ApiException {
        List<CertKey> response = api.listCertKey();

        assertNotNull(response);
    }

    /**
     * remove cert-key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeCertKeyTest() throws ApiException {
        addCertKey();

        List<CertKey> ckListBefore = api.listCertKey();
        int lenBefore = ckListBefore.size();
        CertKey ckObject = api.getCertKey(name);
        assertTrue(ckListBefore.contains(ckObject));

        api.removeCertKey(name);

        List<CertKey> ckListAfter = api.listCertKey();
        int lenAfter = ckListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(ckListAfter.contains(ckObject));
    }

}
