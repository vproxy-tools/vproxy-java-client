/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import org.junit.Before;
import org.junit.Test;
import vproxy.client.ApiException;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;
import static vproxy.client.TestUtils.randomName;
import static vproxy.client.TestUtils.randomPort;

/**
 * API tests for TcpLbApi
 */
public class TcpLbApiTest {

    private final TcpLbApi api = new TcpLbApi();
    private String acceptorElgName;
    private String workerElgName;
    private String upsName;
    private String secgName;
    private String ckName;
    private String name;
    private int port;

    @Before
    public void setUp() throws Exception {
        acceptorElgName = randomName("acceptor");
        workerElgName = randomName("worker");
        upsName = randomName("ups");
        secgName = randomName("secg");
        ckName = randomName("ck");
        name = randomName("tl");
        port = randomPort();

        EventLoopGroupCreate acceptor = new EventLoopGroupCreate();
        acceptor.setName(acceptorElgName);
        new EventLoopGroupApi().addEventLoopGroup(acceptor);

        EventLoopGroupCreate worker = new EventLoopGroupCreate();
        worker.setName(workerElgName);
        new EventLoopGroupApi().addEventLoopGroup(worker);

        UpstreamCreate ups = new UpstreamCreate();
        ups.setName(upsName);
        new UpstreamApi().addUpstream(ups);

        SecurityGroupCreate secg = new SecurityGroupCreate();
        secg.setName(secgName);
        secg.setDefaultRule(Rule.ALLOW);
        new SecurityGroupApi().addSecurityGroup(secg);

        String certPath;
        String keyPath;
        {
            File tmpCertFile = File.createTempFile("cert", ".pem");
            tmpCertFile.deleteOnExit();
            File tmpKeyFile = File.createTempFile("key", ".pem");
            tmpKeyFile.deleteOnExit();

            FileOutputStream fos = new FileOutputStream(tmpCertFile);
            fos.write(CertKeyApiTest.TEST_CERT.getBytes());
            fos.flush();
            fos.close();
            fos = new FileOutputStream(tmpKeyFile);
            fos.write(CertKeyApiTest.TEST_KEY.getBytes());
            fos.flush();
            fos.close();

            certPath = tmpCertFile.getAbsolutePath();
            keyPath = tmpKeyFile.getAbsolutePath();
        }
        CertKeyCreate body = new CertKeyCreate();
        body.setName(ckName);
        body.addCertsItem(certPath);
        body.setKey(keyPath);
        new CertKeyApi().addCertKey(body);
    }

    private void addTcpLb() throws ApiException {
        TcpLbCreate req = new TcpLbCreate();
        req.setName(name);
        req.setAcceptorLoopGroup(acceptorElgName);
        req.setWorkerLoopGroup(workerElgName);
        req.setAddress("127.0.0.1:" + port);
        req.setBackend(upsName);
        req.setInBufferSize(1024);
        req.setOutBufferSize(2048);
        req.setSecurityGroup(secgName);
        req.setProtocol(Protocol.HTTP);
        req.addListOfCertKeyItem(ckName);
        api.addTcpLb(req);
    }

    /**
     * add tcp-lb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTcpLbTest() throws ApiException {
        int oldLen = api.listTcpLb().size();

        addTcpLb();

        List<TcpLb> tlList = api.listTcpLb();
        assertEquals(oldLen + 1, tlList.size());
        TcpLb tl = api.getTcpLb(name);
        assertTrue(tlList.contains(tl));
        assertEquals(name, tl.getName());
        assertEquals(acceptorElgName, tl.getAcceptorLoopGroup());
        assertEquals(workerElgName, tl.getWorkerLoopGroup());
        assertEquals("127.0.0.1:" + port, tl.getAddress());
        assertEquals(upsName, tl.getBackend());
        assertEquals(1024, tl.getInBufferSize().intValue());
        assertEquals(2048, tl.getOutBufferSize().intValue());
        assertEquals(secgName, tl.getSecurityGroup());
        assertEquals(Protocol.HTTP, tl.getProtocol());
        assertEquals(Collections.singletonList(ckName), tl.getListOfCertKey());
    }

    /**
     * get detailed info of one tcp-lb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTcpLbTest() throws ApiException {
        addTcpLb();

        TcpLbDetail tl = api.describeTcpLb(name);
        assertEquals(name, tl.getName());
        assertEquals(acceptorElgName, tl.getAcceptorLoopGroup().getName());
        assertEquals(workerElgName, tl.getWorkerLoopGroup().getName());
        assertEquals("127.0.0.1:" + port, tl.getAddress());
        assertEquals(upsName, tl.getBackend().getName());
        assertEquals(1024, tl.getInBufferSize().intValue());
        assertEquals(2048, tl.getOutBufferSize().intValue());
        assertEquals(secgName, tl.getSecurityGroup().getName());
        assertEquals(Protocol.HTTP, tl.getProtocol());
        assertEquals(1, tl.getListOfCertKey().size());
        assertEquals(ckName, tl.getListOfCertKey().get(0).getName());
    }

    /**
     * get tcp-lb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTcpLbTest() throws ApiException {
        addTcpLb();

        TcpLb response = api.getTcpLb(name);

        assertNotNull(response);
    }

    /**
     * retrieve tcp-lb list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTcpLbTest() throws ApiException {
        List<TcpLb> response = api.listTcpLb();

        assertNotNull(response);
    }

    /**
     * remove tcp-lb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTcpLbTest() throws ApiException {
        addTcpLb();

        List<TcpLb> tlListBefore = api.listTcpLb();
        int lenBefore = tlListBefore.size();
        TcpLb tlObject = api.getTcpLb(name);
        assertTrue(tlListBefore.contains(tlObject));

        api.removeTcpLb(name);

        List<TcpLb> tlListAfter = api.listTcpLb();
        int lenAfter = tlListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(tlListAfter.contains(tlObject));
    }

    /**
     * update tcp-lb
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTcpLbTest() throws ApiException {
        addTcpLb();

        String secgName2 = randomName("secg");
        SecurityGroupCreate secg = new SecurityGroupCreate();
        secg.setName(secgName2);
        secg.setDefaultRule(Rule.ALLOW);
        new SecurityGroupApi().addSecurityGroup(secg);

        TcpLbUpdate update = new TcpLbUpdate();
        update.setInBufferSize(1122);
        update.setOutBufferSize(3344);
        update.setSecurityGroup(secgName2);
        api.updateTcpLb(name, update);

        TcpLb tl = api.getTcpLb(name);
        assertEquals(1122, tl.getInBufferSize().intValue());
        assertEquals(3344, tl.getOutBufferSize().intValue());
        assertEquals(secgName2, tl.getSecurityGroup());
    }

}
