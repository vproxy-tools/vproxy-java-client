/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import org.junit.Before;
import org.junit.Test;
import vproxy.client.ApiException;

import java.util.List;

import static org.junit.Assert.*;
import static vproxy.client.TestUtils.randomName;

/**
 * API tests for ServerApi
 */
public class ServerApiTest {

    private final ServerApi api = new ServerApi();
    private String sgName;
    private String name;

    @Before
    public void setUp() throws ApiException {
        String elgName = randomName("elg");
        sgName = randomName("sg");
        name = randomName("svr");

        EventLoopGroupCreate elg = new EventLoopGroupCreate();
        elg.setName(elgName);
        new EventLoopGroupApi().addEventLoopGroup(elg);

        ServerGroupCreate sg = new ServerGroupCreate();
        sg.setName(sgName);
        sg.setTimeout(1000);
        sg.setPeriod(2000);
        sg.setUp(2);
        sg.setDown(3);
        sg.setProtocol(CheckProtocol.TCP);
        sg.setMethod(ServerGroupMethod.WRR);
        sg.setEventLoopGroup(elgName);
        new ServerGroupApi().addServerGroup(sg);
    }

    private void addServer() throws ApiException {
        ServerCreate req = new ServerCreate();
        req.setName(name);
        req.setAddress("127.0.0.1:8080");
        req.setWeight(10);
        api.addServer(sgName, req);
    }

    /**
     * add server into server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addServerTest() throws ApiException {
        int oldLen = api.listServer(sgName).size();

        addServer();

        List<Server> svrList = api.listServer(sgName);
        assertEquals(oldLen + 1, svrList.size());
        Server svr = api.getServer(sgName, name);
        assertTrue(svrList.contains(svr));
        assertEquals(name, svr.getName());
        assertEquals("127.0.0.1:8080", svr.getAddress());
        assertEquals(10, svr.getWeight().intValue());
        assertEquals("127.0.0.1", svr.getCurrentIp());
        assertEquals(Server.StatusEnum.DOWN, svr.getStatus());
    }

    /**
     * get detailed info of one server in server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeServerTest() throws ApiException {
        addServer();

        ServerDetail svr = api.describeServer(sgName, name);
        assertEquals(name, svr.getName());
        assertEquals("127.0.0.1:8080", svr.getAddress());
        assertEquals(10, svr.getWeight().intValue());
        assertEquals("127.0.0.1", svr.getCurrentIp());
        assertEquals(ServerDetail.StatusEnum.DOWN, svr.getStatus());
    }

    /**
     * get server in server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerTest() throws ApiException {
        addServer();

        Server svr = api.getServer(sgName, name);

        assertNotNull(svr);
    }

    /**
     * retrieve server list from server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServerTest() throws ApiException {
        List<Server> response = api.listServer(sgName);

        assertNotNull(response);
    }

    /**
     * remove server from server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeServerTest() throws ApiException {
        addServer();

        List<Server> svrListBefore = api.listServer(sgName);
        int lenBefore = svrListBefore.size();
        Server svrObject = api.getServer(sgName, name);
        assertTrue(svrListBefore.contains(svrObject));

        api.removeServer(sgName, name);

        List<Server> svrListAfter = api.listServer(sgName);
        int lenAfter = svrListAfter.size();

        assertEquals(lenBefore - 1, lenAfter);
        assertFalse(svrListAfter.contains(svrObject));
    }

    /**
     * update server in server-group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerTest() throws ApiException {
        addServer();

        ServerUpdate update = new ServerUpdate();
        update.setWeight(25);
        api.updateServer(sgName, name, update);

        Server svr = api.getServer(sgName, name);
        assertEquals(25, svr.getWeight().intValue());
    }

}
