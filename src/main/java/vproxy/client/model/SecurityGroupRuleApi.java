/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import vproxy.client.ApiCallback;
import vproxy.client.ApiClient;
import vproxy.client.ApiException;
import vproxy.client.ApiResponse;
import vproxy.client.Configuration;
import vproxy.client.Pair;
import vproxy.client.ProgressRequestBody;
import vproxy.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import vproxy.client.model.SecurityGroupRule;
import vproxy.client.model.SecurityGroupRuleCreate;
import vproxy.client.model.SecurityGroupRuleDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityGroupRuleApi {
    private ApiClient apiClient;

    public SecurityGroupRuleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityGroupRuleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addSecurityGroupRule
     * @param secg name of the security-group (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addSecurityGroupRuleCall(String secg, SecurityGroupRuleCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/security-group/{secg}/security-group-rule"
            .replaceAll("\\{" + "secg" + "\\}", apiClient.escapeString(secg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addSecurityGroupRuleValidateBeforeCall(String secg, SecurityGroupRuleCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'secg' is set
        if (secg == null) {
            throw new ApiException("Missing the required parameter 'secg' when calling addSecurityGroupRule(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addSecurityGroupRule(Async)");
        }
        

        com.squareup.okhttp.Call call = addSecurityGroupRuleCall(secg, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * add security-group-rule into security-group
     * 
     * @param secg name of the security-group (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addSecurityGroupRule(String secg, SecurityGroupRuleCreate body) throws ApiException {
        addSecurityGroupRuleWithHttpInfo(secg, body);
    }

    /**
     * add security-group-rule into security-group
     * 
     * @param secg name of the security-group (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addSecurityGroupRuleWithHttpInfo(String secg, SecurityGroupRuleCreate body) throws ApiException {
        com.squareup.okhttp.Call call = addSecurityGroupRuleValidateBeforeCall(secg, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * add security-group-rule into security-group (asynchronously)
     * 
     * @param secg name of the security-group (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addSecurityGroupRuleAsync(String secg, SecurityGroupRuleCreate body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addSecurityGroupRuleValidateBeforeCall(secg, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for describeSecurityGroupRule
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call describeSecurityGroupRuleCall(String secg, String secgr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security-group/{secg}/security-group-rule/{secgr}/detail"
            .replaceAll("\\{" + "secg" + "\\}", apiClient.escapeString(secg.toString()))
            .replaceAll("\\{" + "secgr" + "\\}", apiClient.escapeString(secgr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call describeSecurityGroupRuleValidateBeforeCall(String secg, String secgr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'secg' is set
        if (secg == null) {
            throw new ApiException("Missing the required parameter 'secg' when calling describeSecurityGroupRule(Async)");
        }
        
        // verify the required parameter 'secgr' is set
        if (secgr == null) {
            throw new ApiException("Missing the required parameter 'secgr' when calling describeSecurityGroupRule(Async)");
        }
        

        com.squareup.okhttp.Call call = describeSecurityGroupRuleCall(secg, secgr, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get detailed info of one security-group-rule in security-group
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @return SecurityGroupRuleDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SecurityGroupRuleDetail describeSecurityGroupRule(String secg, String secgr) throws ApiException {
        ApiResponse<SecurityGroupRuleDetail> resp = describeSecurityGroupRuleWithHttpInfo(secg, secgr);
        return resp.getData();
    }

    /**
     * get detailed info of one security-group-rule in security-group
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @return ApiResponse&lt;SecurityGroupRuleDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SecurityGroupRuleDetail> describeSecurityGroupRuleWithHttpInfo(String secg, String secgr) throws ApiException {
        com.squareup.okhttp.Call call = describeSecurityGroupRuleValidateBeforeCall(secg, secgr, null, null);
        Type localVarReturnType = new TypeToken<SecurityGroupRuleDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get detailed info of one security-group-rule in security-group (asynchronously)
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call describeSecurityGroupRuleAsync(String secg, String secgr, final ApiCallback<SecurityGroupRuleDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = describeSecurityGroupRuleValidateBeforeCall(secg, secgr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SecurityGroupRuleDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSecurityGroupRule
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSecurityGroupRuleCall(String secg, String secgr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security-group/{secg}/security-group-rule/{secgr}"
            .replaceAll("\\{" + "secg" + "\\}", apiClient.escapeString(secg.toString()))
            .replaceAll("\\{" + "secgr" + "\\}", apiClient.escapeString(secgr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSecurityGroupRuleValidateBeforeCall(String secg, String secgr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'secg' is set
        if (secg == null) {
            throw new ApiException("Missing the required parameter 'secg' when calling getSecurityGroupRule(Async)");
        }
        
        // verify the required parameter 'secgr' is set
        if (secgr == null) {
            throw new ApiException("Missing the required parameter 'secgr' when calling getSecurityGroupRule(Async)");
        }
        

        com.squareup.okhttp.Call call = getSecurityGroupRuleCall(secg, secgr, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get security-group-rule in security-group
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @return SecurityGroupRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SecurityGroupRule getSecurityGroupRule(String secg, String secgr) throws ApiException {
        ApiResponse<SecurityGroupRule> resp = getSecurityGroupRuleWithHttpInfo(secg, secgr);
        return resp.getData();
    }

    /**
     * get security-group-rule in security-group
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @return ApiResponse&lt;SecurityGroupRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SecurityGroupRule> getSecurityGroupRuleWithHttpInfo(String secg, String secgr) throws ApiException {
        com.squareup.okhttp.Call call = getSecurityGroupRuleValidateBeforeCall(secg, secgr, null, null);
        Type localVarReturnType = new TypeToken<SecurityGroupRule>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get security-group-rule in security-group (asynchronously)
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSecurityGroupRuleAsync(String secg, String secgr, final ApiCallback<SecurityGroupRule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSecurityGroupRuleValidateBeforeCall(secg, secgr, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SecurityGroupRule>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSecurityGroupRule
     * @param secg name of the security-group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSecurityGroupRuleCall(String secg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security-group/{secg}/security-group-rule"
            .replaceAll("\\{" + "secg" + "\\}", apiClient.escapeString(secg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSecurityGroupRuleValidateBeforeCall(String secg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'secg' is set
        if (secg == null) {
            throw new ApiException("Missing the required parameter 'secg' when calling listSecurityGroupRule(Async)");
        }
        

        com.squareup.okhttp.Call call = listSecurityGroupRuleCall(secg, progressListener, progressRequestListener);
        return call;

    }

    /**
     * retrieve security-group-rule list from security-group
     * 
     * @param secg name of the security-group (required)
     * @return List&lt;SecurityGroupRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SecurityGroupRule> listSecurityGroupRule(String secg) throws ApiException {
        ApiResponse<List<SecurityGroupRule>> resp = listSecurityGroupRuleWithHttpInfo(secg);
        return resp.getData();
    }

    /**
     * retrieve security-group-rule list from security-group
     * 
     * @param secg name of the security-group (required)
     * @return ApiResponse&lt;List&lt;SecurityGroupRule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SecurityGroupRule>> listSecurityGroupRuleWithHttpInfo(String secg) throws ApiException {
        com.squareup.okhttp.Call call = listSecurityGroupRuleValidateBeforeCall(secg, null, null);
        Type localVarReturnType = new TypeToken<List<SecurityGroupRule>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve security-group-rule list from security-group (asynchronously)
     * 
     * @param secg name of the security-group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSecurityGroupRuleAsync(String secg, final ApiCallback<List<SecurityGroupRule>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSecurityGroupRuleValidateBeforeCall(secg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SecurityGroupRule>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeSecurityGroupRule
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeSecurityGroupRuleCall(String secg, String secgr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security-group/{secg}/security-group-rule/{secgr}"
            .replaceAll("\\{" + "secg" + "\\}", apiClient.escapeString(secg.toString()))
            .replaceAll("\\{" + "secgr" + "\\}", apiClient.escapeString(secgr.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeSecurityGroupRuleValidateBeforeCall(String secg, String secgr, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'secg' is set
        if (secg == null) {
            throw new ApiException("Missing the required parameter 'secg' when calling removeSecurityGroupRule(Async)");
        }
        
        // verify the required parameter 'secgr' is set
        if (secgr == null) {
            throw new ApiException("Missing the required parameter 'secgr' when calling removeSecurityGroupRule(Async)");
        }
        

        com.squareup.okhttp.Call call = removeSecurityGroupRuleCall(secg, secgr, progressListener, progressRequestListener);
        return call;

    }

    /**
     * remove security-group-rule from security-group
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeSecurityGroupRule(String secg, String secgr) throws ApiException {
        removeSecurityGroupRuleWithHttpInfo(secg, secgr);
    }

    /**
     * remove security-group-rule from security-group
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeSecurityGroupRuleWithHttpInfo(String secg, String secgr) throws ApiException {
        com.squareup.okhttp.Call call = removeSecurityGroupRuleValidateBeforeCall(secg, secgr, null, null);
        return apiClient.execute(call);
    }

    /**
     * remove security-group-rule from security-group (asynchronously)
     * 
     * @param secg name of the security-group (required)
     * @param secgr name of the security-group-rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeSecurityGroupRuleAsync(String secg, String secgr, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeSecurityGroupRuleValidateBeforeCall(secg, secgr, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
