/*
 * vproxy
 * The vproxy http controller api.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package vproxy.client.model;

import vproxy.client.ApiCallback;
import vproxy.client.ApiClient;
import vproxy.client.ApiException;
import vproxy.client.ApiResponse;
import vproxy.client.Configuration;
import vproxy.client.Pair;
import vproxy.client.ProgressRequestBody;
import vproxy.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import vproxy.client.model.Error400;
import vproxy.client.model.Error404;
import vproxy.client.model.Error409;
import vproxy.client.model.Error500;
import vproxy.client.model.EventLoop;
import vproxy.client.model.EventLoopCreate;
import vproxy.client.model.EventLoopDetail;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventLoopApi {
    private ApiClient apiClient;

    public EventLoopApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventLoopApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addEventLoop
     * @param elg name of the event-loop-group (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addEventLoopCall(String elg, EventLoopCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/event-loop-group/{elg}/event-loop"
            .replaceAll("\\{" + "elg" + "\\}", apiClient.escapeString(elg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addEventLoopValidateBeforeCall(String elg, EventLoopCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'elg' is set
        if (elg == null) {
            throw new ApiException("Missing the required parameter 'elg' when calling addEventLoop(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addEventLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = addEventLoopCall(elg, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * add event-loop into event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void addEventLoop(String elg, EventLoopCreate body) throws ApiException {
        addEventLoopWithHttpInfo(elg, body);
    }

    /**
     * add event-loop into event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> addEventLoopWithHttpInfo(String elg, EventLoopCreate body) throws ApiException {
        com.squareup.okhttp.Call call = addEventLoopValidateBeforeCall(elg, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * add event-loop into event-loop-group (asynchronously)
     * 
     * @param elg name of the event-loop-group (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addEventLoopAsync(String elg, EventLoopCreate body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addEventLoopValidateBeforeCall(elg, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for describeEventLoop
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call describeEventLoopCall(String elg, String el, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event-loop-group/{elg}/event-loop/{el}/detail"
            .replaceAll("\\{" + "elg" + "\\}", apiClient.escapeString(elg.toString()))
            .replaceAll("\\{" + "el" + "\\}", apiClient.escapeString(el.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call describeEventLoopValidateBeforeCall(String elg, String el, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'elg' is set
        if (elg == null) {
            throw new ApiException("Missing the required parameter 'elg' when calling describeEventLoop(Async)");
        }
        
        // verify the required parameter 'el' is set
        if (el == null) {
            throw new ApiException("Missing the required parameter 'el' when calling describeEventLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = describeEventLoopCall(elg, el, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get detailed info of one event-loop in event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @return EventLoopDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventLoopDetail describeEventLoop(String elg, String el) throws ApiException {
        ApiResponse<EventLoopDetail> resp = describeEventLoopWithHttpInfo(elg, el);
        return resp.getData();
    }

    /**
     * get detailed info of one event-loop in event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @return ApiResponse&lt;EventLoopDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventLoopDetail> describeEventLoopWithHttpInfo(String elg, String el) throws ApiException {
        com.squareup.okhttp.Call call = describeEventLoopValidateBeforeCall(elg, el, null, null);
        Type localVarReturnType = new TypeToken<EventLoopDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get detailed info of one event-loop in event-loop-group (asynchronously)
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call describeEventLoopAsync(String elg, String el, final ApiCallback<EventLoopDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = describeEventLoopValidateBeforeCall(elg, el, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventLoopDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getEventLoop
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getEventLoopCall(String elg, String el, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event-loop-group/{elg}/event-loop/{el}"
            .replaceAll("\\{" + "elg" + "\\}", apiClient.escapeString(elg.toString()))
            .replaceAll("\\{" + "el" + "\\}", apiClient.escapeString(el.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getEventLoopValidateBeforeCall(String elg, String el, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'elg' is set
        if (elg == null) {
            throw new ApiException("Missing the required parameter 'elg' when calling getEventLoop(Async)");
        }
        
        // verify the required parameter 'el' is set
        if (el == null) {
            throw new ApiException("Missing the required parameter 'el' when calling getEventLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = getEventLoopCall(elg, el, progressListener, progressRequestListener);
        return call;

    }

    /**
     * get event-loop in event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @return EventLoop
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EventLoop getEventLoop(String elg, String el) throws ApiException {
        ApiResponse<EventLoop> resp = getEventLoopWithHttpInfo(elg, el);
        return resp.getData();
    }

    /**
     * get event-loop in event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @return ApiResponse&lt;EventLoop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EventLoop> getEventLoopWithHttpInfo(String elg, String el) throws ApiException {
        com.squareup.okhttp.Call call = getEventLoopValidateBeforeCall(elg, el, null, null);
        Type localVarReturnType = new TypeToken<EventLoop>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get event-loop in event-loop-group (asynchronously)
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getEventLoopAsync(String elg, String el, final ApiCallback<EventLoop> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getEventLoopValidateBeforeCall(elg, el, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<EventLoop>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listEventLoop
     * @param elg name of the event-loop-group (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listEventLoopCall(String elg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event-loop-group/{elg}/event-loop"
            .replaceAll("\\{" + "elg" + "\\}", apiClient.escapeString(elg.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listEventLoopValidateBeforeCall(String elg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'elg' is set
        if (elg == null) {
            throw new ApiException("Missing the required parameter 'elg' when calling listEventLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = listEventLoopCall(elg, progressListener, progressRequestListener);
        return call;

    }

    /**
     * retrieve event-loop list from event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @return List&lt;EventLoop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<EventLoop> listEventLoop(String elg) throws ApiException {
        ApiResponse<List<EventLoop>> resp = listEventLoopWithHttpInfo(elg);
        return resp.getData();
    }

    /**
     * retrieve event-loop list from event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @return ApiResponse&lt;List&lt;EventLoop&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<EventLoop>> listEventLoopWithHttpInfo(String elg) throws ApiException {
        com.squareup.okhttp.Call call = listEventLoopValidateBeforeCall(elg, null, null);
        Type localVarReturnType = new TypeToken<List<EventLoop>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * retrieve event-loop list from event-loop-group (asynchronously)
     * 
     * @param elg name of the event-loop-group (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listEventLoopAsync(String elg, final ApiCallback<List<EventLoop>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listEventLoopValidateBeforeCall(elg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<EventLoop>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeEventLoop
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeEventLoopCall(String elg, String el, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/event-loop-group/{elg}/event-loop/{el}"
            .replaceAll("\\{" + "elg" + "\\}", apiClient.escapeString(elg.toString()))
            .replaceAll("\\{" + "el" + "\\}", apiClient.escapeString(el.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeEventLoopValidateBeforeCall(String elg, String el, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'elg' is set
        if (elg == null) {
            throw new ApiException("Missing the required parameter 'elg' when calling removeEventLoop(Async)");
        }
        
        // verify the required parameter 'el' is set
        if (el == null) {
            throw new ApiException("Missing the required parameter 'el' when calling removeEventLoop(Async)");
        }
        

        com.squareup.okhttp.Call call = removeEventLoopCall(elg, el, progressListener, progressRequestListener);
        return call;

    }

    /**
     * remove event-loop from event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeEventLoop(String elg, String el) throws ApiException {
        removeEventLoopWithHttpInfo(elg, el);
    }

    /**
     * remove event-loop from event-loop-group
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeEventLoopWithHttpInfo(String elg, String el) throws ApiException {
        com.squareup.okhttp.Call call = removeEventLoopValidateBeforeCall(elg, el, null, null);
        return apiClient.execute(call);
    }

    /**
     * remove event-loop from event-loop-group (asynchronously)
     * 
     * @param elg name of the event-loop-group (required)
     * @param el name of the event-loop (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeEventLoopAsync(String elg, String el, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeEventLoopValidateBeforeCall(elg, el, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
